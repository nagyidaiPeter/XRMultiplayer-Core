// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace XRMultiplayer
{

using global::System;
using global::FlatBuffers;

public struct PlayerTransformStack : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static PlayerTransformStack GetRootAsPlayerTransformStack(ByteBuffer _bb) { return GetRootAsPlayerTransformStack(_bb, new PlayerTransformStack()); }
  public static PlayerTransformStack GetRootAsPlayerTransformStack(ByteBuffer _bb, PlayerTransformStack obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayerTransformStack __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public XRMultiplayer.TransformFB? PlayerTransforms(int j) { int o = __p.__offset(4); return o != 0 ? (XRMultiplayer.TransformFB?)(new XRMultiplayer.TransformFB()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PlayerTransformsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<XRMultiplayer.PlayerTransformStack> CreatePlayerTransformStack(FlatBufferBuilder builder,
      VectorOffset PlayerTransformsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PlayerTransformStack.AddPlayerTransforms(builder, PlayerTransformsOffset);
    return PlayerTransformStack.EndPlayerTransformStack(builder);
  }

  public static void StartPlayerTransformStack(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPlayerTransforms(FlatBufferBuilder builder, VectorOffset PlayerTransformsOffset) { builder.AddOffset(0, PlayerTransformsOffset.Value, 0); }
  public static VectorOffset CreatePlayerTransformsVector(FlatBufferBuilder builder, Offset<XRMultiplayer.TransformFB>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePlayerTransformsVectorBlock(FlatBufferBuilder builder, Offset<XRMultiplayer.TransformFB>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPlayerTransformsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<XRMultiplayer.PlayerTransformStack> EndPlayerTransformStack(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<XRMultiplayer.PlayerTransformStack>(o);
  }
  public static void FinishPlayerTransformStackBuffer(FlatBufferBuilder builder, Offset<XRMultiplayer.PlayerTransformStack> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPlayerTransformStackBuffer(FlatBufferBuilder builder, Offset<XRMultiplayer.PlayerTransformStack> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
