// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace XRMultiplayer
{

using global::System;
using global::FlatBuffers;

public struct MessageFB : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static MessageFB GetRootAsMessageFB(ByteBuffer _bb) { return GetRootAsMessageFB(_bb, new MessageFB()); }
  public static MessageFB GetRootAsMessageFB(ByteBuffer _bb, MessageFB obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MessageFB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte MessageType { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte Data(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int DataLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDataArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<XRMultiplayer.MessageFB> CreateMessageFB(FlatBufferBuilder builder,
      byte MessageType = 0,
      VectorOffset DataOffset = default(VectorOffset)) {
    builder.StartTable(2);
    MessageFB.AddData(builder, DataOffset);
    MessageFB.AddMessageType(builder, MessageType);
    return MessageFB.EndMessageFB(builder);
  }

  public static void StartMessageFB(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMessageType(FlatBufferBuilder builder, byte MessageType) { builder.AddByte(0, MessageType, 0); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset DataOffset) { builder.AddOffset(1, DataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<XRMultiplayer.MessageFB> EndMessageFB(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<XRMultiplayer.MessageFB>(o);
  }
  public static void FinishMessageFBBuffer(FlatBufferBuilder builder, Offset<XRMultiplayer.MessageFB> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMessageFBBuffer(FlatBufferBuilder builder, Offset<XRMultiplayer.MessageFB> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
