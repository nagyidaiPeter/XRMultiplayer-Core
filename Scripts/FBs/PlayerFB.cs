// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace XRMultiplayer
{

using global::System;
using global::FlatBuffers;

public struct TransformFB : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static TransformFB GetRootAsTransformFB(ByteBuffer _bb) { return GetRootAsTransformFB(_bb, new TransformFB()); }
  public static TransformFB GetRootAsTransformFB(ByteBuffer _bb, TransformFB obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TransformFB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte PlayerID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public XRMultiplayer.Vec3? Pos { get { int o = __p.__offset(6); return o != 0 ? (XRMultiplayer.Vec3?)(new XRMultiplayer.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public XRMultiplayer.Vec3? QrOffset { get { int o = __p.__offset(8); return o != 0 ? (XRMultiplayer.Vec3?)(new XRMultiplayer.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public XRMultiplayer.Quat? Rot { get { int o = __p.__offset(10); return o != 0 ? (XRMultiplayer.Quat?)(new XRMultiplayer.Quat()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public bool RHActive { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public XRMultiplayer.HandState? RHState { get { int o = __p.__offset(14); return o != 0 ? (XRMultiplayer.HandState?)(new XRMultiplayer.HandState()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public XRMultiplayer.Vec3? RHPos { get { int o = __p.__offset(16); return o != 0 ? (XRMultiplayer.Vec3?)(new XRMultiplayer.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public XRMultiplayer.Quat? RHRot { get { int o = __p.__offset(18); return o != 0 ? (XRMultiplayer.Quat?)(new XRMultiplayer.Quat()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public XRMultiplayer.Vec3? RHPointerPos { get { int o = __p.__offset(20); return o != 0 ? (XRMultiplayer.Vec3?)(new XRMultiplayer.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public bool LHActive { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public XRMultiplayer.HandState? LHState { get { int o = __p.__offset(24); return o != 0 ? (XRMultiplayer.HandState?)(new XRMultiplayer.HandState()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public XRMultiplayer.Vec3? LHPos { get { int o = __p.__offset(26); return o != 0 ? (XRMultiplayer.Vec3?)(new XRMultiplayer.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public XRMultiplayer.Quat? LHRot { get { int o = __p.__offset(28); return o != 0 ? (XRMultiplayer.Quat?)(new XRMultiplayer.Quat()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public XRMultiplayer.Vec3? LHPointerPos { get { int o = __p.__offset(30); return o != 0 ? (XRMultiplayer.Vec3?)(new XRMultiplayer.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartTransformFB(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddPlayerID(FlatBufferBuilder builder, byte PlayerID) { builder.AddByte(0, PlayerID, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<XRMultiplayer.Vec3> PosOffset) { builder.AddStruct(1, PosOffset.Value, 0); }
  public static void AddQrOffset(FlatBufferBuilder builder, Offset<XRMultiplayer.Vec3> QrOffsetOffset) { builder.AddStruct(2, QrOffsetOffset.Value, 0); }
  public static void AddRot(FlatBufferBuilder builder, Offset<XRMultiplayer.Quat> RotOffset) { builder.AddStruct(3, RotOffset.Value, 0); }
  public static void AddRHActive(FlatBufferBuilder builder, bool RHActive) { builder.AddBool(4, RHActive, false); }
  public static void AddRHState(FlatBufferBuilder builder, Offset<XRMultiplayer.HandState> RHStateOffset) { builder.AddStruct(5, RHStateOffset.Value, 0); }
  public static void AddRHPos(FlatBufferBuilder builder, Offset<XRMultiplayer.Vec3> RHPosOffset) { builder.AddStruct(6, RHPosOffset.Value, 0); }
  public static void AddRHRot(FlatBufferBuilder builder, Offset<XRMultiplayer.Quat> RHRotOffset) { builder.AddStruct(7, RHRotOffset.Value, 0); }
  public static void AddRHPointerPos(FlatBufferBuilder builder, Offset<XRMultiplayer.Vec3> RHPointerPosOffset) { builder.AddStruct(8, RHPointerPosOffset.Value, 0); }
  public static void AddLHActive(FlatBufferBuilder builder, bool LHActive) { builder.AddBool(9, LHActive, false); }
  public static void AddLHState(FlatBufferBuilder builder, Offset<XRMultiplayer.HandState> LHStateOffset) { builder.AddStruct(10, LHStateOffset.Value, 0); }
  public static void AddLHPos(FlatBufferBuilder builder, Offset<XRMultiplayer.Vec3> LHPosOffset) { builder.AddStruct(11, LHPosOffset.Value, 0); }
  public static void AddLHRot(FlatBufferBuilder builder, Offset<XRMultiplayer.Quat> LHRotOffset) { builder.AddStruct(12, LHRotOffset.Value, 0); }
  public static void AddLHPointerPos(FlatBufferBuilder builder, Offset<XRMultiplayer.Vec3> LHPointerPosOffset) { builder.AddStruct(13, LHPointerPosOffset.Value, 0); }
  public static Offset<XRMultiplayer.TransformFB> EndTransformFB(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<XRMultiplayer.TransformFB>(o);
  }
  public static void FinishTransformFBBuffer(FlatBufferBuilder builder, Offset<XRMultiplayer.TransformFB> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTransformFBBuffer(FlatBufferBuilder builder, Offset<XRMultiplayer.TransformFB> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
